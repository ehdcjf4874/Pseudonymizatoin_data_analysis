plot(cars)
plot(cars$speed, cars$dist)
cars$dist1 = as.integer(cars$dist/10)*10
View(cars)
cor(cars$speed. cars$dist) #?곴?怨꾩닔
cor(cars$speed, cars$dist) #?곴?怨꾩닔
cor(cars$speed, cars$dist1) #
library(magrittr)
library(earth)
library(MASS)
library(mda)
library(caret)
install.packages("earth")
library(mda)
install.packages("mda")
install.packages("caret")
library(magrittr)
library(earth)
library(MASS)
library(mda)
library(caret)
german_credit <- read.csv("german credit data.csv")
setwd("C:/Users/ehdcj/OneDrive/바탕화면
"_
setwd("C:/Users/ehdcj/OneDrive/바탕 화면
")
setwd("C:/Users/ehdcj/OneDrive/바탕 화면")
setwd("C:/Users/ehdcj/OneDrive/바탕 화면german_credit <- read.csv("german credit data.csv")
german_credit <- read.csv("german credit data.csv")
str(german_credit)
german_credit$checking <- as.factor(german_credit$checking)
german_credit$duration <- as.numeric(german_credit$duration)
german_credit$history <- as.factor(german_credit$history)
german_credit$purpose <- as.factor(german_credit$purpose)
german_credit$amount <- as.numeric(german_credit$amount)
german_credit$savings <- as.factor(german_credit$savings)
german_credit$employed <- as.factor(german_credit$employed)
german_credit$installp <- as.factor(german_credit$installp)
german_credit$marital <- as.factor(german_credit$marital)
german_credit$coapp <- as.factor(german_credit$coapp)
german_credit$resident <- as.factor(german_credit$resident)
german_credit$property <- as.factor(german_credit$property)
german_credit$age <- as.numeric(german_credit$age)
german_credit$other <- as.factor(german_credit$other)
german_credit$housing <- as.factor(german_credit$housing)
german_credit$existcr <- as.factor(german_credit$existcr)
german_credit$job <- as.factor(german_credit$job)
german_credit$depends <- as.factor(german_credit$depends)
german_credit$telephon <- as.factor(german_credit$telephon)
german_credit$foreign <- as.factor(german_credit$foreign)
german_credit$good_bad <- factor(german_credit$good_bad,level=c("good","bad"))
# data split
nobs<-nrow(german_credit)
set.seed(12)
ntrain<-round(0.4*nobs)
nvalid<-round(0.3*nobs)
ntest<-nobs-ntrain-nvalid
c(ntrain,nvalid,ntest)
pick1 <- sample(1:nobs, ntrain, replace=F)
train <- german_credit[pick1,]
pick2 <- sample(1:(nobs-ntrain), nvalid, replace=F)
valid <- german_credit[-pick1,][pick2,]
test <- german_credit[-pick1,][-pick2,]
nrow(train)
nrow(valid)
nrow(test)
table(train$existcr)
table(valid$existcr)
table(test$existcr)str(train)
mars1 <- earth(  good_bad ~ .,degree=2, data = train)
print(mars1)
summary(mars1)
plot(mars1)
plotmo(mars1)
# tune the model
train2 <- rbind(train,valid)
hyper_grid <- expand.grid(
degree = 1:2,
nprune = seq(2, 50, length.out = 10) %>% floor()
)
seq(2, 50, length.out = 10) %>% floor()
tuned_mars <- train(
x = subset(train2, select = -good_bad),
y = train2$good_bad,
method = "earth",
metric = "Accuracy",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = hyper_grid
)
install.packages("e1071")
tuned_mars <- train(
x = subset(train2, select = -good_bad),
y = train2$good_bad,
method = "earth",
metric = "Accuracy",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = hyper_grid
)
warings()
warings()
warnings()
plot(tuned_mars)
tuned_mars$bestTune
hyper_grid <- expand.grid(
degree = 1:2,
nprune = 10:20
)
tuned_mars <- train(
x = subset(train, select = -good_bad),
y = train$good_bad,
method = "earth",
metric = "Accuracy",
trControl = trainControl(method = "cv", number = 5),
tuneGrid = hyper_grid
)
plot(tuned_mars)
tuned_mars$bestTune
library(vip)
# variable importance plots
p1 <- vip(tuned_mars, num_features = 40, bar = FALSE, value = "gcv") + ggtitle("GCV")
p2 <- vip(tuned_mars, num_features = 40, bar = FALSE, value = "rss") + ggtitle("RSS")
p1
p2
install.packages("vip")
library(vip)
# variable importance plots
p1 <- vip(tuned_mars, num_features = 40, bar = FALSE, value = "gcv") + ggtitle("GCV")
p2 <- vip(tuned_mars, num_features = 40, bar = FALSE, value = "rss") + ggtitle("RSS")
p1
p2
grid.arrange(p1, p2, ncol = 2)
mars.final <- earth(  good_bad ~ .,degree=1, nprune=18, data = train2)
summary(mars.final)
print(mars.final)
summary(mars.final)
plot(mars.final)
plotmo(mars.final)
prob <- predict(mars.final,newdata=test,type='response')
pclass<- as.factor(ifelse(prob > 0.5,"bad","good"))
confusionMatrix(pclass,test$good_bad)
mer_step <- mean(pclass != test$good_bad)
mer_step
prob <- predict(mars.final,newdata=test,type='response')
pclass<- as.factor(ifelse(prob > 0.5,"bad","good"))
confusionMatrix(pclass,test$good_bad)
mer_MARS <- mean(pclass != test$good_bad)
mer_MARS
cls
clear()
cls()
cls
# read data
german_credit <- read.csv("german credit data.csv")
str(german_credit)
summary(german_credit)
# change type of each variable
table(german_credit$existcr)
german_credit$existcr<-ifelse(german_credit$existcr<3,german_credit$existcr,3)
table(german_credit$existcr)
table(german_credit$purpose)
german_credit$purpose <- ifelse(german_credit$purpose=="X","10",german_credit$purpose)
table(german_credit$purpose)
german_credit$checking <- as.numeric(german_credit$checking)
german_credit$duration<- as.numeric(german_credit$duration)
german_credit$history<- as.numeric(german_credit$history)
german_credit$purpose<- as.numeric(german_credit$purpose)
german_credit$amount<- as.numeric(german_credit$amount)
german_credit$savings<- as.numeric(german_credit$savings)
german_credit$employed<- as.numeric(german_credit$employed)
german_credit$installp<- as.numeric(german_credit$installp)
german_credit$marital<- as.numeric(german_credit$marital)
german_credit$coapp<- as.numeric(german_credit$coapp)
german_credit$resident<- as.numeric(german_credit$resident)
german_credit$property<- as.numeric(german_credit$property)
german_credit$age<- as.numeric(german_credit$age)
german_credit$other<- as.numeric(german_credit$other)
german_credit$housing<- as.numeric(german_credit$housing)
german_credit$existcr<-as.numeric(german_credit$existcr)
german_credit$job<- as.numeric(german_credit$job)
german_credit$depends<- as.numeric(german_credit$depends)
german_credit$telephon<- as.numeric(german_credit$telephon)
german_credit$foreign<- as.numeric(german_credit$foreign)
# change type and the order in good_bad
german_credit$good_bad <- factor(german_credit$good_bad,level=c("good","bad"))
str(german_credit)
library(moments)
# 연속형변수의 대칭화 & 표준화
# 대칭화
german1 <- german_credit
hist(german1$amount)
summary(german1$amount)
library(MASS)
library(caret)
library(moments)
agostino.test(german_credit$amount)
boxcox(german1$amount~1,lambda=seq(-2,2,0.25),plotit=T)
german1$amount<-log(german1$amount)
skewness(german1$amount)
agostino.test(german1$amount)
hist(german1$duration)
agostino.test(german_credit$duration)
boxcox(german1$duration~1,lambda=seq(-2,2,0.25),plotit=T)
german1$duration<-log(german1$duration)
skewness(german1$duration)
agostino.test(german1$duration)
skewness(german1$age)
agostino.test(german1$age)
hist(german1$age)
boxcox(german1$age~1,lambda=seq(-2,2,0.25),plotit=T)
german1$age <- (german1$age)^(-1/2)
skewness(german1$age)
agostino.test(german1$age)
# 변수 구분: factor, numeric, target
names(german1)
xvar <- names(german1[,-ncol(german1)]) # get names for explanatory variables
xnvar <-c("duration","amount","age")# numeric variables
xfvar <-xvar[!(xvar %in% c("duration","amount","age"))]# factor variables
yvar <- names(german1)[ncol(german1)]# target variable
# 연속형 변수의 표준화
nstdProcess <- preProcess(german1[,xnvar], method=c("center", "scale"))
german1[,xnvar] <- predict(nstdProcess, german1[,xnvar])
library(psych)
describe(german1[,c("duration","amount","age")])
# dummy variable 생성
german2 <- german1
str(german2)
german2[,xfvar] <- sapply(german2[,xfvar],as.factor)
str(german2)
# create dummy variables for factor variables
f <- as.formula(paste('~',paste(xfvar,collapse = '+')))
dummy <- model.matrix(f,data=german2)
head(dummy)
german2 <-cbind(german1[,c(yvar,xnvar)],dummy[,-1])
head(german2)
str(german2)
# 범주형 변수의 표준화
fstdProcess <- preProcess(german1[,xfvar], method=c("range"))
german1[,xfvar] <- predict(fstdProcess, german1[,xfvar])
table(german1$checking)
head(german1)
# data split
nobs<-nrow(german1)
#nobs<-nrow(german1)
set.seed(345)
ntrain<-round(0.7*nobs)
nvalid<-nobs-ntrain
c(ntrain,nvalid)
pick1 <- sample(1:nobs, ntrain, replace=F)
train <- german1[pick1,]
valid <- german1[-pick1,]
# train <- german2[pick1,]
# valid <- german2[-pick1,]
# model: neural network using neuralnet
# install.packages("neuralnet")
library(neuralnet)
install.packages("neuralnet")
library(neuralnet)
# create formula
#var <- names(german2)
var <- names(german1)
f <- as.formula(paste('good_bad~',paste(xvar,collapse = '+')))
f
?neuralnet
?neuralnet
set.seed(123)
neural1 <- neuralnet(f, data=train, hidden=2, threshold=0.01,
linear.output = F, act.fct="tanh")
plot(neural1)
head(neural1$net.result[[1]])
pred <- predict(neural1,newdata=train)
pred.class <- ifelse(pred[,1]>0.5,"bad","good")
table(pred.class,train$good_bad)
mean(pred.class != train$good_bad) # misclassification rate for train
pred <- predict(neural1,newdata=valid)
pred.class <- ifelse(pred[,1]>0.5,"bad","good")
table(pred.class,valid$good_bad)
mer1 <- mean(pred.class != valid$good_bad) # misclassification rate for target
mer1
# model 2
set.seed(123)
neural2 <- neuralnet(f, data=train, hidden=c(2,2),threshold=0.01,
linear.output = FALSE, act.fct="tanh",likelihood=T)
plot(neural2,rep = 'best')
# misclassification rate
pred <- predict(neural2,newdata=train)
pred.class <- ifelse(pred[,1]>0.5,"bad","good")
mean(pred.class != train$good_bad) # misclassification rate for train
pred <- predict(neural2,newdata=valid)
pred.class <- ifelse(pred[,1]>0.5,"bad","good")
table(pred.class,valid$good_bad)
mer2 <- mean(pred.class != valid$good_bad) # misclassification rate for target
mer2
set.seed(12)
neural3 <- neuralnet(f,data=train,hidden=4,
threshold = 0.01,act.fct="tanh",likelihood=T,
algorithm = "rprop+")
plot(neural3)
# misclassification rate
pred <- predict(neural3,newdata=train)
pred.class <- ifelse(pred[,1]>0.5,"bad","good")
mean(pred.class != train$good_bad) # misclassification rate for train
pred <- predict(neural3,newdata=valid)
pred.class <- ifelse(pred[,1]>0.5,"bad","good")
table(pred.class,valid$good_bad)
mer3 <- mean(pred.class != valid$good_bad) # misclassification rate for target
mer3
# ROC chart & AUC
library(ROCR)
neural2.p <-predict(neural2, newdata=valid)
neural2.pred <- prediction(neural2.p[,2], valid$good_bad)
neural2.roc <- performance(neural2.pred, "tpr", "fpr")
plot(neural2.roc, colorize=TRUE) # ROC-chart
performance(neural2.pred, "auc")@y.values[[1]] # AUC
install.packages("ROCR")
library(ROCR)
neural2.p <-predict(neural2, newdata=valid)
neural2.pred <- prediction(neural2.p[,2], valid$good_bad)
neural2.roc <- performance(neural2.pred, "tpr", "fpr")
plot(neural2.roc, colorize=TRUE) # ROC-chart
performance(neural2.pred, "auc")@y.values[[1]] # AUC
#lift chart
neural2.lift1 <- performance(neural2.pred, "lift", "rpp")
plot(neural2.lift1, colorize=TRUE)
set.seed(10)
neural3 <- neuralnet(f,data=train,hidden=4,
threshold = 0.01,act.fct="tanh",likelihood=T,
algorithm = "rprop+")
plot(neural3)
pred <- predict(neural3,newdata=train)
pred.class <- ifelse(pred[,1]>0.5,"bad","good")
mean(pred.class != train$good_bad) # misclassification rate for train
pred <- predict(neural3,newdata=valid)
pred.class <- ifelse(pred[,1]>0.5,"bad","good")
table(pred.class,valid$good_bad)
mer3 <- mean(pred.class != valid$good_bad) # misclassification rate for target
mer3
install.packages(c("rpart","caret"))
model : cart
library(rpart)
library(caret)
install.packages("randomForest")
library(randomForest)
install.packages("gbm")
library(gbm)
install.packages("xgboost")
library(xgboost)
german_credit <- read.csv("german credit data.csv")
str(german_credit)
# change type of each variable
table(german_credit$existcr)
german_credit$existcr<-ifelse(german_credit$existcr<3,german_credit$existcr,3)
german_credit$existcr<-as.factor(german_credit$existcr)
table(german_credit$existcr)
german_credit$checking <- as.factor(german_credit$checking)
german_credit$duration<- as.numeric(german_credit$duration)
german_credit$history<- as.factor(german_credit$history)
german_credit$purpose<- as.factor(german_credit$purpose)
german_credit$amount<- as.numeric(german_credit$amount)
german_credit$savings<- as.factor(german_credit$savings)
german_credit$employed<- as.factor(german_credit$employed)
german_credit$installp<- as.factor(german_credit$installp)
german_credit$marital<- as.factor(german_credit$marital)
german_credit$coapp<- as.factor(german_credit$coapp)
german_credit$resident<- as.factor(german_credit$resident)
german_credit$property<- as.factor(german_credit$property)
german_credit$age<- as.numeric(german_credit$age)
german_credit$other<- as.factor(german_credit$other)
german_credit$housing<- as.factor(german_credit$housing)
german_credit$existcr<- as.factor(german_credit$existcr)
german_credit$job<- as.factor(german_credit$job)
german_credit$depends<- as.factor(german_credit$depends)
german_credit$telephon<- as.factor(german_credit$telephon)
german_credit$foreign<- as.factor(german_credit$foreign)
german_credit$good_bad<- as.factor(german_credit$good_bad)
nobs<-nrow(german_credit)
set.seed(345)
ntrain<-round(0.7*nobs)
nvalid<-nobs-ntrain
c(ntrain,nvalid)
pick1 <- sample(1:nobs, ntrain, replace=F)
train <- german_credit[pick1,]
valid <- german_credit[-pick1,]
tree1 <- rpart(good_bad ~., data = train)
par(xpd = NA) # otherwise on some devices the text is clipped
plot(tree1)
text(tree1, digits = 3)
print(tree1, digits = 2)
t <- rpart(good_bad ~age, data = train,cp=0)
par(xpd = NA) # otherwise on some devices the text is clipped
plot(t)
text(t, digits = 3)
print(t, digits = 2)
# 사전 pruning
# parameter control
ctrl <- rpart.control(minsplit = 10, minbucket = 5, cp = 0.01,
maxdepth = 6)
tree2 <- rpart(good_bad ~., data = train,control=ctrl)
plot(tree2)
text(tree2, digits = 3)
t <- rpart(good_bad ~age, data = train,cp=0)
par(xpd = NA) # otherwise on some devices the text is clipped
plot(t)
text(t, digits = 3)
print(t, digits = 2)
# 사전 pruning
# parameter control
ctrl <- rpart.control(minsplit = 10, minbucket = 5, cp = 0.01,
maxdepth = 6)
tree2 <- rpart(good_bad ~., data = train,control=ctrl)
plot(tree2)
text(tree2, digits = 3)
print(tree2, digits = 2)
ctrl <- rpart.control(minsplit = 10, minbucket = 5, cp = 0.0,
maxdepth = 6)
tree2 <- rpart(good_bad ~., data = train,control=ctrl)
plot(tree2)
text(tree2, digits = 3)
print(tree2, digits = 2)
# 사후 Pruning
plotcp(tree1)
tree1$cptable
tree1$cptable[6,"CP"]\
tree1$cptable[6,"CP"]
ptree<-prune(tree1, cp= tree1$cptable[6,"CP"])
plot(ptree)
text(ptree)
print(ptree)
plot(credit.cv)
credit.cv$bestTune
# Plot the final tree model
ctrl <- rpart.control(cp = credit.cv$bestTune)
tree3 <- rpart(good_bad ~., data = train2,control=ctrl)
plot(tree3)
text(tree3, digits = 3)
print(tree3,  digits = 2)
train2 <- rbind(train,valid)
set.seed(12)
credit.cv <- train(
good_bad ~., data = train2, method = "rpart",
trControl = trainControl("cv", number = 10),
tuneLength = 10
)
plot(credit.cv)
credit.cv$bestTune
# Plot the final tree model
ctrl <- rpart.control(cp = credit.cv$bestTune)
tree3 <- rpart(good_bad ~., data = train2,control=ctrl)
plot(tree3)
text(tree3, digits = 3)
print(tree3,  digits = 2)
pred.class <- predict(tree1,newdata=valid, type="class")
pred.prob <- predict(tree1,newdata=valid)
pred.class2 <- ifelse(pred.prob[,"bad"]>0.5,"bad","good")
head(pred.prob)
table(pred.class,pred.class2)
confusionMatrix(pred.class,valid$good_bad)
pred.class <- predict(ptree,newdata=valid, type="class")
confusionMatrix(pred.class,valid$good_bad)
pred.class <- predict(ptree,newdata=valid, type="class")
confusionMatrix(pred.class,valid$good_bad
pred.class <- predict(ptree,newdata=valid, type="class")
confusionMatrix(pred.class,valid$good_bad)
# bagging tree
set.seed(1234)
bagging <- train(good_bad ~.,
data = train,
method = "treebag",
nbagg=10,
trControl = trainControl(method = "cv", number = 10),
metric = "Accuracy"
)
bagging$finalModel
bagging
summary(bagging)
plot(varImp(bagging))
set.seed(1234)
rf <- randomForest( good_bad ~., data=train,
mtry = floor(sqrt(21)),
ntree = 500, importance = T)
rf
summary(rf)
rf
summary(rf)
ranf <- train(
good_bad ~.,
data = train,
method = "rf",
metric = "Accuracy",
ntree=100,
tuneGrid = expand.grid(mtry = 1:10), # searching around mtry=4
trControl = trainControl(method = "cv", number = 10)
)
ranf
plot(ranf)
plot(varImp(ranf))
ranf
plot(ranf)
plot(varImp(ranf))
# XGBoost
xgb <- train(
good_bad ~.,
data = train,
method = "xgbTree",
metric = "Accuracy",
tuneLength = 5,
trControl = trainControl(method = "cv", number = 10)
)
xgb
plot(xgb )
plot(varImp(xgb ))
q()
q()
